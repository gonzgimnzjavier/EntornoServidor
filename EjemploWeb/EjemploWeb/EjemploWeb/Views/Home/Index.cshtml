@{
	ViewData["Title"] = "Home Page";
}

<div class="text-center">
	<h1 class="display-4">EJERCICIOS JAVIER GONZÁLEZ GIMÉNEZ</h1>
</div>

		<!--Ejercicio 1-->

		<h2>Ejercicio 1</h2>

		@{

			Random rand = new Random();

			int cantidadNotas = rand.Next(1, 11);

			int[] almacenNotas = new int[cantidadNotas];

			double maximaNota = 0;

			double minimaNota = 0;

			double media = 0;

			<p>El alumno ha realizado: @cantidadNotas examenes</p>
				<ul>
					@for (int i = 0; i < almacenNotas.Length; i++)
					{
						almacenNotas[i] = rand.Next(0, 11);
						<li>@(i + 1)ª calificacion: @almacenNotas[i]</li>
						media += almacenNotas[i];
					}
				</ul>
				maximaNota = almacenNotas.Max();
				minimaNota = almacenNotas.Min();
				media = media / almacenNotas.Length;
				<p>La nota maxima del alumno es: @maximaNota</p>
				<p>La nota minima del alumno es: @minimaNota</p>
				<p>La nota media del alumno es: @Math.Round(media,2)</p>
		}

		<!--Ejercicio 2-->

		<h2>Ejercicio 2</h2>

		@{
			String[] almacenadorCadenas = new String[5];
			String[] almacenadorCadenasInverso = new String[5];


			static String generadorCadenasAleatorias()
			{
				Random random = new Random();
				String cadenaAleatoria = "";
				int numeroCaracteres = random.Next(1, 21);
				for (int i = 0; i < numeroCaracteres; i++)
				{
					cadenaAleatoria += (char)random.Next(97, 123);
				}
				return cadenaAleatoria;
			}

			<h3>Las 5 cadenas generadas son:</h3>
			<ul>
				@for (int i = 0; i < 5; i++)
				{
					almacenadorCadenas[i] = generadorCadenasAleatorias();
					almacenadorCadenasInverso[i] = new String(almacenadorCadenas[i].Reverse().ToArray());
					<li>@almacenadorCadenas[i]</li>
				}
			</ul>

			<h3>Las 5 cadenas generadas de forma inversa son:</h3>
			<ul>
				@for (int i = 0; i < 5; i++)
				{
					<li>@almacenadorCadenasInverso[i]</li>
				}
			</ul>
		}

		<!--Ejercicio 3-->
		<h2>Ejercicio 3</h2>
		@{
			Random random = new Random();

			int numeroElementos = random.Next(2, 11);

			int[] numeros = new int[numeroElementos];

			<h3>Se han generado los siguientes numeros en una matriz de @numeros.Length posiciones:</h3>

			<ul>
				@for (int i = 0; i < numeros.Length; i++)
				{
					numeros[i] = random.Next(1, 1001);
					<li>@numeros[i]</li>
				}
			</ul>

			Array.Sort(numeros);
			<h3>De la siguiente forma quedarian ordenados:</h3>
			<ul>
				@foreach (int i in numeros)
				{
					<li>@i</li>
				}
			</ul>

		}

		<!--Ejercicio 4-->
		<h2>Ejercicio 4</h2>
		@{
			var cartas = new List<Carta>
			{
				new Carta("Oros", "As", "1Oro.jpg"),
				new Carta("Oros", "2", "2Oro.jpg"),
				new Carta("Oros", "3", "3Oro.jpg"),
				new Carta("Oros", "4", "4Oro.jpg"),
				new Carta("Oros", "5", "5Oro.jpg"),
				new Carta("Oros", "6", "6Oro.jpg"),
				new Carta("Oros", "7", "7Oro.jpg"),
				new Carta("Oros", "Sota", "8Oro.jpg"),
				new Carta("Oros", "Caballo", "9Oro.jpg"),
				new Carta("Oros", "Rey", "10Oro.jpg"),

				new Carta("Copas", "As", "1Copas.jpg"),
				new Carta("Copas", "2", "2Copas.jpg"),
				new Carta("Copas", "3", "3Copas.jpg"),
				new Carta("Copas", "4", "4Copas.jpg"),
				new Carta("Copas", "5", "5Copas.jpg"),
				new Carta("Copas", "6", "6Copas.jpg"),
				new Carta("Copas", "7", "7Copas.jpg"),
				new Carta("Copas", "Sota", "8Copas.jpg"),
				new Carta("Copas", "Caballo", "9Copas.jpg"),
				new Carta("Copas", "Rey", "10Copas.jpg"),

				new Carta("Espadas", "As", "1Espadas.jpg"),
				new Carta("Espadas", "2", "2Espadas.jpg"),
				new Carta("Espadas", "3", "3Espadas.jpg"),
				new Carta("Espadas", "4", "4Espadas.jpg"),
				new Carta("Espadas", "5", "5Espadas.jpg"),
				new Carta("Espadas", "6", "6Espadas.jpg"),
				new Carta("Espadas", "7", "7Espadas.jpg"),
				new Carta("Espadas", "Sota", "8Espadas.jpg"),
				new Carta("Espadas", "Caballo", "9Espadas.jpg"),
				new Carta("Espadas", "Rey", "10Espadas.jpg"),

				new Carta("Bastos", "As", "1Bastos.jpg"),
				new Carta("Bastos", "2", "2Bastos.jpg"),
				new Carta("Bastos", "3", "3Bastos.jpg"),
				new Carta("Bastos", "4", "4Bastos.jpg"),
				new Carta("Bastos", "5", "5Bastos.jpg"),
				new Carta("Bastos", "6", "6Bastos.jpg"),
				new Carta("Bastos", "7", "7Bastos.jpg"),
				new Carta("Bastos", "Sota", "8Bastos.jpg"),
				new Carta("Bastos", "Caballo", "9Bastos.jpg"),
				new Carta("Bastos", "Rey", "10Bastos.jpg")
			};

			// Mostrar todas las cartas
			<h2>Todas las cartas</h2>
			<ul>
				@foreach (var carta in cartas)
				{
					<li>@carta.Palo - @carta.Numero</li>
					<img src="~/images/cartas/@carta.Imagen"/>
				}
			</ul>

			// Mostrar una carta específica
			var nombreCarta = "Oros - As";
			var cartaEspecifica = cartas.FirstOrDefault(c => $"{c.Palo} - {c.Numero}" == nombreCarta);
			if (cartaEspecifica != null)
			{
				<h2>Carta Específica</h2>
				<p>@cartaEspecifica.Palo - @cartaEspecifica.Numero</p>
				<img src="~/images/cartas/@cartaEspecifica.Imagen"/>
			}
			else
			{
				<p>Carta no encontrada</p>
			}

			// Obtener y mostrar una carta aleatoria
			var cartaAleatoria = cartas[rand.Next(cartas.Count)];

			<h2>Carta Aleatoria</h2>
			<p>@cartaAleatoria.Palo - @cartaAleatoria.Numero</p>
			<img src="~/images/cartas/@cartaAleatoria.Imagen"/>
		}

		@functions {
			// Clase Carta
			public class Carta
			{
				public string Palo { get; set; }
				public string Numero { get; set; }
				public string Imagen { get; set; }

				public Carta(string palo, string numero, string imagen)
				{
					Palo = palo;
					Numero = numero;
					Imagen = imagen;
				}
			}
		}